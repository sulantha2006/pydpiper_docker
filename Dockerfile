# Generated by Sulantha v0.1
# For installing Pydpiper from MICe.

FROM ubuntu:xenial

ARG DEBIAN_FRONTEND=noninteractive

#----------------------------------------------------------
# Install common dependencies and create default entrypoint
#----------------------------------------------------------
ENV LANG="C.UTF-8" \
    LC_ALL="C" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN apt-get update -qq && apt-get install -yq --no-install-recommends  \
    	bzip2 ca-certificates curl unzip software-properties-common \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir /neurodocker \
    && echo '#!/usr/bin/env bash' >> $ND_ENTRYPOINT \
    && echo 'set +x' >> $ND_ENTRYPOINT \
    && echo 'if [ -z "$*" ]; then /usr/bin/env bash; else $*; fi' >> $ND_ENTRYPOINT \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
ENTRYPOINT ["/neurodocker/startup.sh"]

RUN apt-get update -qq && apt-get install -yq --no-install-recommends git vim \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


# Create new user: neuro
RUN useradd --no-user-group --create-home --shell /bin/bash neuro
USER neuro

# Installing Miniconda

ENV CONDA_DIR=/opt/conda \
    PATH=/opt/conda/bin:$PATH
RUN echo "Downloading Miniconda installer ..." \
    && miniconda_installer=/tmp/miniconda.sh \
    && curl -sSL -o $miniconda_installer https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && /bin/bash $miniconda_installer -f -b -p $CONDA_DIR \
    && rm -f $miniconda_installer \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    && conda update -y -q --all && sync \
    && conda clean -tipsy && sync

# Create conda environment

RUN conda create -y -q --name pydpiper python=3.6.1 \
    	numpy pandas traits \
    && sync && conda clean -tipsy && sync \
    && /bin/bash -c "source activate pydpiper \
    	&& pip install -q --no-cache-dir \
    	nipype" \
    && sync
ENV PATH=/opt/conda/envs/pydpiper/bin:$PATH

USER root

# Install MINC 1.9.15
RUN apt-get update -qq && apt-get install -yq --no-install-recommends libc6 libstdc++6 imagemagick perl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
RUN echo "Downloading MINC, BEASTLIB, and MODELS..." \
    && curl --retry 5 -o /tmp/minc.deb -sSL http://packages.bic.mni.mcgill.ca/minc-toolkit/Debian/minc-toolkit-1.9.16-20180117-Ubuntu_16.04-x86_64.deb \
    && dpkg -i /tmp/minc.deb && rm -f /tmp/minc.deb \
    && curl --retry 5 -o /tmp/beast.deb -sSL http://packages.bic.mni.mcgill.ca/minc-toolkit/Debian/beast-library-1.1.0-20121212.deb \
    && dpkg -i /tmp/beast.deb && rm -f /tmp/beast.deb \
    && curl --retry 5 -o /tmp/models.deb -sSL http://packages.bic.mni.mcgill.ca/minc-toolkit/Debian/bic-mni-models-0.1.1-20120421.deb \
    && dpkg -i /tmp/models.deb && rm -f /tmp/models.deb \
    && sed -i '$isource /opt/minc/1.9.16/minc-toolkit-config.sh' $ND_ENTRYPOINT

# Installing R
RUN apt-get update -qq && apt-get install -yq --no-install-recommends apt-transport-https \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
RUN add-apt-repository 'deb [arch=amd64,i386] https://cran.rstudio.com/bin/linux/ubuntu xenial/'
RUN apt-get update -qq && apt-get install -yq --no-install-recommends r-base \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# RMINC
RUN apt-get update -qq && apt-get install -yq --no-install-recommends gcc g++ build-essential curl libssl-dev libcurl4-openssl-dev ed \
    libblas-dev liblapack-dev gfortran automake \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN Rscript -e 'install.packages(c("devtools", "shinyBS", "reshape2", "DT", "plotrix", "ggplot2"), repos = "http://cran.us.r-project.org")'
RUN Rscript -e 'install.packages(c("data.tree"), repos = "http://cran.us.r-project.org")'

RUN Rscript -e "devtools::install_github('Mouse-Imaging-Centre/RMINC' \
                  , c('Depends', 'Imports', 'LinkingTo' \
                    , 'Suggests', 'Enhances'))"

# MINC_STUFF
RUN cd /tmp && git clone https://github.com/Mouse-Imaging-Centre/minc-stuffs.git minc-stuff && cd minc-stuff \
    && git submodule update --init --recursive && ./autogen.sh  \
    && ./configure --with-minc2 --prefix=/opt/minc-stuffs --with-build-path=/opt/minc/1.9.16 \
    && make && make install && /opt/conda/envs/pydpiper/bin/python setup.py install
# PYDPIPER
RUN /opt/conda/envs/pydpiper/bin/pip install numpy networkx pandas pyminc Pyro4 pytest qbatch pytz python-dateutil
RUN cd /tmp && git clone https://github.com/Mouse-Imaging-Centre/pydpiper.git pydpiper && cd pydpiper \
    && /opt/conda/envs/pydpiper/bin/python setup.py install

USER neuro
